package View;

import Model.Question;
import java.awt.Cursor;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author User
 */
@SuppressWarnings("serial")
public class AddnewQuestionFrame extends javax.swing.JFrame {

	/** Variables Declaration **/                     
    private javax.swing.JLabel back;
    private javax.swing.JLabel backTxt;
    private javax.swing.JLabel doneLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> levelCombo;
    private javax.swing.JLabel logoTitle;
    private javax.swing.JTextField questioncontent;
    private javax.swing.JTextArea textArea;
	Question localQuestion;
	public HashMap<String,String> optionsT ;
	String dist;
	
	public AddnewQuestionFrame() {
		dist="";
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddnewQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddnewQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddnewQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddnewQuestionFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
		initComponents();
		this.setResizable(false);
		back.setCursor(new Cursor(Cursor.HAND_CURSOR));
		backTxt.setCursor(new Cursor(Cursor.HAND_CURSOR));
        logoTitle.requestFocusInWindow();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        optionsT = new HashMap<String,String>();
    }
	
	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        logoTitle = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        backTxt = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        questioncontent = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        levelCombo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        doneLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Snake Game");
        setMaximumSize(new java.awt.Dimension(1000, 600));
        setMinimumSize(new java.awt.Dimension(1000, 600));
        setPreferredSize(new java.awt.Dimension(1000, 600));
        getContentPane().setLayout(null);

        logoTitle.setBackground(new java.awt.Color(255, 255, 255));
        logoTitle.setFont(new java.awt.Font("Gabriola", 2, 115)); // NOI18N
        logoTitle.setText("Snake Game");
        getContentPane().add(logoTitle);
        logoTitle.setBounds(160, 20, 660, 140);

        back.setBackground(new java.awt.Color(255, 255, 255));
        back.setFont(new java.awt.Font("Segoe UI Black", 1, 24)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 255));
        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/home.png"))); // NOI18N
        back.setToolTipText("Go Home");
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        getContentPane().add(back);
        back.setBounds(30, 25, 70, 50);

        backTxt.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        backTxt.setText(" Back");
        backTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 51, 0), 8, true));
        backTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backTxtMouseClicked(evt);
            }
        });
        getContentPane().add(backTxt);
        backTxt.setBounds(110, 460, 90, 50);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Question");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(190, 180, 100, 40);

        getContentPane().add(questioncontent);
        questioncontent.setBounds(300, 180, 520, 50);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Level");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(410, 250, 60, 40);


        levelCombo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        levelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Easy", "Medium", "Hard" }));
        getContentPane().add(levelCombo);
        levelCombo.setBounds(490, 250, 90, 50);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("Add Option");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(630, 250, 130, 50);

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(370, 320, 320, 110);

        doneLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/doneBTN.png"))); // NOI18N
        doneLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doneLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                doneLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                doneLabelMouseExited(evt);
            }
        });
        getContentPane().add(doneLabel);
        doneLabel.setBounds(410, 440, 220, 70);

        //jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/background.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1000, 592);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void backMouseClicked(java.awt.event.MouseEvent evt) {                                  
    	MainFrame mf = new MainFrame(Controller.Main.file);
        this.setVisible(false);
        mf.setVisible(true);
    }
    
    private void doneLabelMouseClicked(java.awt.event.MouseEvent evt) { 
    	//Valid Checks to the Fields
    	if(questioncontent.getText().length()<1) {
    		JOptionPane.showMessageDialog(rootPane, "Please insert a question");
    	} else {
    			try {
    				if(optionsT.keySet().size()<2) {
    					JOptionPane.showMessageDialog(null, "You need to add 4 options");
    					return;
    				} else {
    					int existAtleastOneCorrectAnswer = 0;
    					for(String s : optionsT.keySet()){
    						if(optionsT.get(s).equals("Correct")) {
    							existAtleastOneCorrectAnswer++;
    						}
    					}
    					if(existAtleastOneCorrectAnswer==0) {
    						JOptionPane.showMessageDialog(null, "you need to add correct answer");
    						return;
    					}else if(existAtleastOneCorrectAnswer>1) {  JOptionPane.showMessageDialog(null, "you must choose one correct answer");return;}
    				}
    				    				
    				if(dist.equals("editquestion")) {}
    				else {
    					//Check if the this question is already in the system
    						if(ViewLogic.getInstance().getSpecificQuestion(questioncontent.getText())!=null) {
    							JOptionPane.showMessageDialog(rootPane, "ID already exists");
    							return;
    					}
    				}
    				
    				String qLevel = null;//level of the new question
    				
    				switch(levelCombo.getSelectedItem().toString()) {
    				case "Easy":
    					qLevel="1";
    					break;
    				case "Medium":
    					qLevel="2";
    					break;
    				case "Hard":
    					qLevel="3";
    					break;
    				}
    				
    				ArrayList<String> correctOnes = new ArrayList<String>();
    				ArrayList<String> answers = new ArrayList<String>(optionsT.keySet());
    				
    				for(String k : optionsT.keySet()) {
    					if(optionsT.get(k).equals("Correct")) {
    						correctOnes.add(k);
    					}
    				}

    				
    				Question questionToAdd = new Question(questioncontent.getText(),answers,qLevel,correctOnes.get(0),"panda");
    				
    				if(dist.equals("editquestion")) {//the question we build above is to edit 
    					ViewLogic.getInstance().updateAnExistingQuestion(questionToAdd);
    					JOptionPane.showMessageDialog(null, "Question was Updated Successfully");
    				} else {// the question we build above is to add it
    					ViewLogic.getInstance().addQuestion(questionToAdd);
    					JOptionPane.showMessageDialog(null, "Question was added Successfully");
    					resetAllFields();
    				}
    			} catch (Exception e) {
    				JOptionPane.showMessageDialog(null, "Question ID must be numerical");
    			}
    	}
    }
    
    private void doneLabelMouseEntered(java.awt.event.MouseEvent evt) {                                       
    	ImageIcon diceBTN = new ImageIcon(this.getClass().getResource("/images/dontBTN_onhover.png"));
        doneLabel.setIcon(diceBTN);
    }
    
    private void doneLabelMouseExited(java.awt.event.MouseEvent evt) {                                      
    	ImageIcon diceBTN = new ImageIcon(this.getClass().getResource("/images/doneBTN.png"));
    	doneLabel.setIcon(diceBTN);
    }
    
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {                                      
    	ViewLogic.getInstance().decorateOption(this); 
    }                                     

    private void backTxtMouseClicked(java.awt.event.MouseEvent evt) {                                     
    	this.setVisible(false);
    	AdminFrame af = new AdminFrame();
    	af.setVisible(true);
    }
    
    public void updateTextArea() {
        String kahoot = "";
        
        for(String s : optionsT.keySet()){
        	kahoot+=s+" "+optionsT.get(s)+"\n";
        }
        
        textArea.setText(kahoot);
    }
   
    class JEnhancedOptionPane extends JOptionPane {
    	
    	public String showInputDialog (final Object message, final Object[] options)
            throws HeadlessException {
    			final JOptionPane pane = new JOptionPane(message, QUESTION_MESSAGE, OK_CANCEL_OPTION, null, options, null);
    			pane.setWantsInput(true);
    			pane.setComponentOrientation((getRootFrame()).getComponentOrientation());
    			pane.setMessageType(QUESTION_MESSAGE);
    			pane.selectInitialValue();
    			final String title = UIManager.getString("OptionPane.inputDialogTitle", null);
    			final JDialog dialog = pane.createDialog(null, title);
    			dialog.setVisible(true);
    			dialog.dispose();
    			final Object value = pane.getInputValue();
    			return (value == UNINITIALIZED_VALUE) ? null : (String) value;
    	}
    }
    
    public void setDetails(String[] options) {
        for(int i=0;i<options.length;i++) {
            optionsT.put(options[0],options[1]);
        }
    }
    
    public void setLocalQuestion(Question q) {
        this.localQuestion=q;
    }
    
    public void setDest(String dist2) {
        this.dist=dist2;
    }

    public void initFrame() {
    	if(dist.equals("editquestion")) {
    		questioncontent.setText(localQuestion.getText());
            if(localQuestion.getLevel().equals("1"))
            	levelCombo.setSelectedIndex(0);
            else if (localQuestion.getLevel().equals("2"))
            	levelCombo.setSelectedIndex(1);
            else levelCombo.setSelectedIndex(2);
            
            ArrayList<String> correctAnswerss = new ArrayList<String>();
            correctAnswerss.add(localQuestion.getAnswer());
            
            for(int i=0;i<localQuestion.getOptionsList().size();i++) {
            	String ans=String.valueOf(i+1);
            	if(ans.equals(localQuestion.getAnswer()))
            		optionsT.put(localQuestion.getOptionsList().get(i), "Correct");
            	else optionsT.put(localQuestion.getOptionsList().get(i), "False");
            }
            
            questioncontent.setEditable(false);;
            updateTextArea();
        }
    }
    
    public void resetAllFields() {
        if(!dist.equals("editquestion")) {
            this.setVisible(false);
            AddnewQuestionFrame addas = new AddnewQuestionFrame();
            addas.setVisible(true);
        }
    }                  
}
